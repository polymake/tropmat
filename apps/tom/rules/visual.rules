# Copyright (c) 2013-2014 Silke Horn
# http://solros.de/polymake/tropmat
# 
# This file is part of the polymake extension tropmat.
# 
# tropmat is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# tropmat is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with tropmat.  If not, see <http://www.gnu.org/licenses/>.




# @topic objects/Visual::TropicalOrientedMatroid
# @category Visualization
# Visualisation of tropical oriented matroids.
# @relates TropicalOrientedMatroid
package Visual::TropicalOrientedMatroid;
use Polymake::Struct (
   [ '@ISA' => 'Container' ],
   [ '$TropicalOrientedMatroid' => '#%', default => 'undef' ]
);

# multiple colours for visualisation of multiple hyperplanes: possible values are:
# 'hsv' (default) for colours distributed evenly in the hsv colour space
# 'tud' for TU Darmstadt colour scheme (requires tud colours in your rgb.txt) 
# 'gray' for gray scales
custom $multicolor = 'hsv';

object TropicalOrientedMatroid {

# @category Visualization
# Visualizes all pseudohyperplanes inside the mixed subdivision.
# @return Visual::TropicalOrientedMatroid
user_method VISUAL_ALL : VERTICES, DIM, N_PHP{
	my ($self)=@_;
	
	compose($self->VISUAL_MIXED_SUBDIVISION(EdgeColor=>'grey', FacetStyle=>'hidden'), $self->VISUAL_DUAL_PHPS());
}
precondition : DIM {$this->DIM<=3, $this->DIM>=2}



# @category Visualization
# Visualizes the //i//-th dual pseudohyperplane.
# @param Int i
# @return Visual::TropicalOrientedMatroid
user_method VISUAL_DUAL_PHP($; %Visual::Polygons::decorations) : VERTICES, DIM, GENERAL_POSITION {
	my ($self, $php, $decor)=@_;

	my $d=$self->DIM;
	my $vertices=$self->PSEUDOHYPERPLANE($php);
	
	if ($d >= 4) {
		die "don't know how to visualize $d-dimensional polytopal complex";
	}

	my @cells_visual=();

	
	if ($self->GENERAL_POSITION) {
		
		if ($d == 2) {
			foreach (@{$vertices}) {
				foreach (dual_of_fine_cell($_,$php,$d)) {
					my $tmp=ortho_project_2d($_);
					push(@cells_visual,(my $pv=$tmp->VISUAL( VertexStyle=>'hidden', $decor )));
				}
			}
		}
		
		if ($d == 3) {
			foreach (@{$vertices}) {
				foreach (dual_of_fine_cell($_,$php,$d)) {
					my $temp=ortho_project($_);
					push(@cells_visual,(my $pv=$temp->VISUAL( VertexStyle=>'hidden', $decor )));
				}
			}
		}
		
	} else {
		
		if ($d == 2) {
			foreach (@{$vertices}) {
				foreach (dual_of_cell($self, $_,$php)) {
					my $tmp=ortho_project_2d($_);
					push(@cells_visual,(my $pv=$tmp->VISUAL( VertexStyle=>'hidden', $decor )));
				}
			}
		}
		
		if ($d == 3) {
			foreach (@{$vertices}) {
				my @duals=dual_of_cell($self, $_,$php);
				foreach(@duals){
					my $temp=ortho_project($_);
					my $tmpvs=$temp->VERTICES;
					push(@cells_visual,(my $pv=$temp->VISUAL( VertexStyle=>'hidden', $decor )));
				}
			}
		}
	}
	
   visualize(new Visual::TropicalOrientedMatroid( Name => "Dual",
				TropicalOrientedMatroid => $self,
				@cells_visual));

}
precondition : DIM { $this->DIM<=3, $this->DIM>=2 }
#}

# @category Visualization
# Visualises the given dual pseudohyperplanes in different colours.
# @param Set<Int> phps default: draw all pseudohyperplanes
# @return Visual::TropicalOrientedMatroid
user_method VISUAL_DUAL_PHPS : VERTICES, DIM, N_PHP{
	my ($self, $hps) = @_;
	my @h;
	unless (defined $hps) {
		@h=();
		for (my $i=1; $i<=$self->N_PHP; ++$i){
			push(@h,$i);
		}
	} else {
		@h = @{$hps};
	}

	my $angle=360/(@h);
	my $count=0;
	
	my $d=$self->DIM;

	if ($d >= 4) {
		die "don't know how to visualize $d-dimensional polytopal complex";
	}

	my @cells_visual=();

	foreach (@h) {
		my $php=$_;
#		my $vertices=$self->PSEUDOHYPERPLANE($php);

		my $h=@h;
		my $hue=$angle*$count;

		if ($d == 2) {
			push(@cells_visual, my $v_php=$self->VISUAL_DUAL_PHP($php, VertexStyle=>'hidden', EdgeColor=>get_color($count, $h)));
		}
		
		if ($d == 3) {
			push(@cells_visual, my $v_php=$self->VISUAL_DUAL_PHP($php, VertexStyle=>'hidden', FacetColor=>get_color($count, $h)));
		}
		++$count;
	}

   visualize(new Visual::TropicalOrientedMatroid( Name => "Dual",
					TropicalOrientedMatroid => $self,
					@cells_visual));
}
precondition : DIM {$this->DIM<=3, $this->DIM>=2}


# @category Visualization
# Visualizes the mixed subdivision of n&Delta;<sup>d-1</sup> (d=[[DIM]] and n=[[N_PHP]])
# corresponding to the tropical oriented matroid.
# @return Visual::TropicalOrientedMatroid
user_method VISUAL_MIXED_SUBDIVISION(%Visual::Polygons::decorations) : VERTICES, DIM {
	my ($self, $decor)=@_;
	my $d = $self->DIM;
	my $vertices = $self->VERTICES;

    if ($d >= 4) {
		die "don't know how to visualize the mixed subdivision of a $d-simplex\n";
    }
 	
	my @cells_visual = ( );
 	
   	if ($d <= 2) {
		foreach (@{$vertices}) {
    		my $mink = ortho_project_2d(minkowski_cell($_, 3));	
    		$mink->name=toString($_);
	     	push (@cells_visual, (my $pv = $mink->VISUAL( VertexStyle=>'hidden', $decor )));
		}
	}
	elsif ($d == 3) {
		foreach (@{$vertices}) {
			my $s = minkowski_cell($_, 4);
    		my $mink = ortho_project($s);		
    		$mink->name=toString($_);
	     	push (@cells_visual, (my $pv = $mink->VISUAL( VertexStyle=>'hidden', $decor )));
		}
	}

   visualize(new Visual::TropicalOrientedMatroid( Name => "Mixed subdivision",
					TropicalOrientedMatroid => $self,
					@cells_visual));
}
precondition : DIM { $this->DIM<=3 }

# convert a type to a string
sub toString {
	my $v=shift;
	my $r="( ";
	
	foreach (@$v) {
		$r=$r.$_." ";
	}
	$r=$r.")";
	
	return $r;
}


# @category Visualization
# Visualizes the subcomplex of the mixed subdivision 
# of n&Delta;<sup>d-1</sup> (d=[[DIM]] and n=[[N_PHP]])
# corresponding to the given tropical pseudohyperplanes.
# @param Set<Int> phps default: draw all pseudohyperplanes
# @return Visual::TropicalOrientedMatroid
user_method VISUAL_PSEUDO_HYPERPLANES: VERTICES, DIM {
	my ($self, $hps)=@_;
	my @h;
	unless (defined $hps) {
		@h=();
		for (my $i=1; $i<=$self->N_PHP; ++$i){
			push(@h,$i);
		}
	} else {
		@h = @{$hps};
	}
	my $d=$self->DIM;
	
	my $col;	# colour difference value
	 if (@h==1) {$col=1;} else {$col=1/(@h-1);}	
	my $count=0;	# hp counter

    if ($d >= 4) {
		die "don't know how to visualize the mixed subdivision of a $d-simplex\n";
    }

	my @cells_visual = ( );
	$count=0;
	my $h=@h;
	foreach (@h) {
		my $vertices = $self->PSEUDOHYPERPLANE($_);
 	
	   	if ($d <= 2) {
			foreach (@{$vertices}) {
    			my $mink = shift_php(minkowski_cell($_, 3), $count+1);
    			
    			my $colour=$count*$col;
	     		push (@cells_visual, (my $pv = $mink->VISUAL( VertexStyle=>'hidden', EdgeColor=>'red', FacetColor=>new RGB($colour,$colour,$colour) )));
			}
		}
		elsif ($d == 3) {
			foreach (@{$vertices}) {
				my $s = minkowski_cell($_, 4);
    			my $mink = ortho_project($s);		
	    	 	push (@cells_visual, (my $pv = $mink->VISUAL( 
	    	 	FacetColor=>get_color($count,$h), VertexStyle=>'hidden' )));
			}
		}
		$count++;
	}

   visualize(new Visual::TropicalOrientedMatroid( Name => "Pseudohyperplanes",
					TropicalOrientedMatroid => $self,
					@cells_visual));
}
precondition : DIM { $this->DIM<=3 }



###########################
# helper functions
###########################

# projects a 3-dim standard simplex in R4 to R3.
sub ortho_project {
	my ($poly) = @_;
	my @vs = @{$poly->VERTICES};
	my @nvs = ();
	foreach (@vs) {
		push(@nvs,ortho_project_vector($_));
	}
	
	my $r = new polytope::Polytope<Float>(VERTICES=>\@nvs);
	return $r;
}

sub ortho_project_vector {
	my $v=shift;
	my @v=@$v;
		
	my @nv = ();
	$nv[0]=1;
	for (my $i=1; $i<4; ++$i) {
		$nv[$i] = $v[$i] - 1/3*$v[4];
	}
	return \@nv;
}

# projects a 2-dim standard simplex in R3 to R2.
sub ortho_project_2d {
	my ($poly) = @_;
	my @vs = @{$poly->VERTICES};
	my @nvs = ();
	foreach (@vs) {
		my @v=@{$_};
		
		my @nv = ();
		$nv[0]=1;
		for (my $i=1; $i<3; ++$i) {
			$nv[$i] = $v[$i] + (1-sqrt(3))/2*$v[3];
		}
		push(@nvs,\@nv);
	}
	
	my $r = new polytope::Polytope<Float>(VERTICES=>\@nvs);
	return $r;
}


# shifts pseudohyperplanes so that one can see them
sub shift_php {
	my ($poly, $number)=@_;
	my @vs = @{$poly->VERTICES};
	my @nvs = ();	# new vertices
	foreach (@vs) {
		my @v=@{$_};
		
		my @nv = ();	# new vertex
		$nv[0]=1;
		for (my $i=1; $i<4; ++$i) {
			$nv[$i] = $v[$i]+$number*.1;
		}
		push(@nvs,\@nv);
	}
	
	my $r = new polytope::Polytope<Float>(VERTICES=>\@nvs);

	return $r;
	

}

sub get_color_hsv {
	my ($ind, $total) = @_;
	return new HSV(360/$total*$ind,1,1);
}


sub get_color_tud {	# tud
	my ($ind, $total) = @_;
	my $i;
	if ($total>=12) {
		$i=($ind+1)% 12;
	}
	else {
		$i=int(12/$total)*$ind+1;
	}
	my $ret="tud".$i."b";
	return $ret;
}

sub get_color_grayscale {
	my ($ind, $total) = @_;

	my $d; 
	if ($total==1) {$d=0;}
	else {$d= 1/($total-1);}

	my $colour=$ind*$d;
	return new RGB($colour, $colour, $colour);
}


# @category Utilities
# Returns the //i//-th of a total of //n// different colours.
# Depending on the value of $Visual::TropicalOrientedMatroid::multicolor either
# in the HSV colour model (//hsv//), grayscale (//gray//) or TU Darmstadt colours (//tud// -- requires the TUD colours in your rgb.txt).
# @param Int i current colour
# @param Int n total number of colours
# @return Color


sub get_color {
	my @params = @_;
	if (defined($Visual::TropicalOrientedMatroid::multicolor)) {
		my $mc = $Visual::TropicalOrientedMatroid::multicolor;
		if ($mc eq 'gray') {
			return get_color_grayscale(@params);
		}
		if ($mc eq 'tud') {
			return get_color_tud(@params);
		}
		if ($mc eq 'hsv') {
			return get_color_hsv(@params);
		}
	}
#	print "Warning: undefined colour scheme -- using 'hsv'.";
	return get_color_hsv(@params);
}


}	# end TropicalOrientedMatroid



# Local Variables:
# mode: perl
# c-basic-offset:3
# End:
